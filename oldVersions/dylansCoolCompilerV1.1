#!/usr/bin/python

# dylan's cool compiler (dcc)

# (poorly) Written by Dylan Waters
# while taking CS 5820 (undergrad compilers) at Weber State University
# under the shaman like guidance of Dr. Robert Ball

import sys

# my compiler I guess, what a world
# The story so far:
#   completed the scanner. all keywords successfully removed
#   parsing works for basic write and math statements

# this is where the execution starts
# check for input file argument
if len(sys.argv) != 2:
  print ("Usage: ./dylansCoolCompiler INPUTCOMMANDFILE")
  exit (1)

# keyword list -- used to check reserve names and verify correct syntax
keywords = ['begin', 'program', 'num', 'write', 'end.', ';', 'array']
stopsymbols = [' ', '=', '^', '+', '-', '*', ';', '/', '(', ')', '[', ']', ',']

### Scanner Variables

# token storage
tokens = []

# says what line we're on, it will start at 1
lineCount = 0

# file to open
instructionFile = open(sys.argv[1], 'r')

# variable to determine whether or not we are reading a line that is entirely or mostly a comment
checkingForEndOfComment = False

# PART 1: SCANNER
# basically this big ass for loop removes comments, and should add every token to a list of tokens
for line in instructionFile:
    # increment the line counter
    lineCount += 1
    # remove left & right whitespace, it doesn't seem to be necessary
    line = line.lstrip()
    line = line.rstrip()

    # print(line)

    # loop through all characters
    i = 0
    tokenStr = ""
    while(i < len(line)):
        # print(tokens)

        # print("i" + str (i))
        # print(len(line))
        # comment loop check, this keeps looping through characters until the end of comment is found
        if(checkingForEndOfComment == True):
            if(line[i] == "*"):
                if(line[i+1] == "/"):
                    checkingForEndOfComment = False
                    i += 2
                    continue
            else:
                i += 1
        # single line comment, break
        elif(line[i] == "/"):
            if(line[i+1] == "/"):
                break
            # multiline comment
            elif(line[i+1] == "*"):
                i += 2
                checkingForEndOfComment = True
        elif(line[i] == " "):
            i += 1
            continue

        else:
            # adds a token based on var
            # tokenStr += line[i]
            # i += 1
            # new loop that checks for characters, goes to the end of line if there is a comment
            while(i < len(line)):
                if(line[i] == "/"):
                    if(line[i+1] == "/"):
                        i = len(line) - 1
                # special case for .. in arrays
                elif(line[i] == "."):
                    # period is always at the end of files as well
                    if(i+1 < len(line)):
                        if(line[i+1] == "."):
                            tokens.append(tokenStr)
                            tokens.append("..")
                            tokenStr = ""
                            i += 1
                    else:
                        tokenStr += "."
                        # else:
                        #     tokenStr = ""
                # if the char is a stop char, store the current token and the current stop char
                elif(line[i] in stopsymbols):
                    # special case for subtraction, if the next char is a digit, it should be attached to that digit instead
                    if(line[i] == "-"):
                        if(line[i+1].isdigit()):
                            tokenStr += line[i]
                            while(line[i+1].isdigit()):
                                tokenStr += line[i+1]
                                i += 1
                            i += 1
                    # print(tokenStr + " `" + line[i] + "`")
                    if(tokenStr != ""):
                        tokens.append(tokenStr)
                        tokenStr = ""
                    # don't store spaces
                    if(line[i] != " "):
                        # print(line[i])
                        tokens.append(line[i])
                    break
                # otherwise the tokenstr just gets longer
                else:
                    # print(line[i])
                    tokenStr += line[i]
                i += 1

        # appends the token string if there is one
        if(tokenStr != ""):
            tokens.append(tokenStr)
            tokenStr = ""
        i += 1

# all done tokenizing, let's check out the list of tokens and make them all lowercase
for i in range(0, len(tokens)):
    tokens[i] = tokens[i].lower()
    # print(tokens[i])

# print("Scanning completed successfully")

# PART 2: PARSER

### Variables
progName = ""

validVars = []

# asm lines to write
asmLines = []

# initialized data
initializedVars = []
initializedVarVals = []

# lists for arrays and their sizes
arrayNames = []
arraySizes = []
deltaValArrays = []
relocationFactors = []

# stored strings
storedStrings = []

# dictionary list for variables and their new names
varsAndVarAliases = {}

# Global vars (lol) which are used in the recursiveVariableAssn function
# used to create jump locations in asm code
numExpJmps = 0

# for exponentiation. If exponentiation occured, the result is in the RAX register, not the RDI register
answerInrax = False

# keeps tack of how many arrays have been created
numArraysCreated = 0

### Functions

# checks valid var names
def validVarName(strToCheck):
    validVar = True
    if(strToCheck in keywords or strToCheck in stopsymbols):
        validVar = False
    elif(strToCheck[0].isalpha()):
        for i in range(1, len(strToCheck)):
            if(strToCheck[i].isdigit() or strToCheck[i].isalpha() or strToCheck[i] == "_"):
                continue
            else:
                # print("Variable name error: variable " + strToCheck + " must only contain alpha characters, digits, or underscores")
                validVar = False
                # sys.exit()
    else:
        # print("Variable name error: variable " + strToCheck + " must begin with an alpha character")
        validVar = False
        # sys.exit()
    return validVar

def recursiveVariableAssn(tokenList, i, computeArray):
    global numExpJmps
    global answerInrax
    # print("now in recursiveVariableAssn function")
    workingStr = ""
    tempExpVar = ""
    while(i < len(tokenList)):
        # print(tokenList[i])
        if(tokenList[i] == ';'):
            # print(" found a ;, exiting")
            # print(asmLines)
            # this is our stop condition
            i += 1
            return i
        elif(validVarName(tokenList[i])):
            # check for exponentiation, it's a weird one
            if(tokenList[i+1] == "^"):
                tempExpVar = tokenList[i]
                i += 1
                continue
            if(workingStr == ""):
                workingStr = "mov"
            asmLines.append(workingStr + " rdi, QWORD[" + varsAndVarAliases[tokenList[i]] + "]\n")
            workingStr = ""
            i += 1
        elif(tokenList[i] == "("):
            i += 1
            i = recursiveVariableAssn(tokenList, i, False)
        elif(tokenList[i] == ")"):
            i += 1
            return i
        elif(tokenList[i] == "+"):
            if( validVarName(tokenList[i+1]) or tokenList[i+1].isdigit() or tokenList[i+1] == "(" or tokenList[i+1].startswith("-")):
                workingStr = "add"
                i += 1
            else:
                print("Error: bad math syntax. token " + tokenList[i+1] + " does not make sense to follow " + tokenList[i])
                sys.exit()
        elif(tokenList[i] == "*"):
            if( validVarName(tokenList[i+1]) or tokenList[i+1].isdigit() or tokenList[i+1] == "(" or tokenList[i+1].startswith("-")):
                workingStr = "imul"
                i += 1
            else:
                print("Error: bad math syntax. token " + tokenList[i+1] + " does not make sense to follow " + tokenList[i])
                sys.exit()
        elif(tokenList[i] == "-"):
            if( validVarName(tokenList[i+1]) or tokenList[i+1].isdigit() or tokenList[i+1] == "(" or tokenList[i+1].startswith("-")):
                workingStr = "sub"
                i += 1
            else:
                print("Error: bad math syntax. token " + tokenList[i+1] + " does not make sense to follow " + tokenList[i])
                sys.exit()
        # exponentiation is a hell of a drug
        elif(tokenList[i] == "^"):
            if(tokenList[i+1].isdigit() or (tokenList[i+1].startswith("-") and tokenList[i+1] != "-")):
                # workingStr = "imul"
                asmLines.append("xor rdi, rdi\n")
                asmLines.append("mov rax, 1\n")
                asmLines.append("_exp_top_" + str(numExpJmps) + ":\n")
                asmLines.append("cmp rdi, " + tokenList[i+1] + "\n")
                asmLines.append("jz _exp_out_" + str(numExpJmps) +"\n")
                if(tempExpVar.isdigit()):
                    asmLines.append("imul rax, " + tempExpVar + "\n")
                else:
                    asmLines.append("imul rax, QWORD[" + tempExpVar + "]\n")
                asmLines.append("inc rdi\n")
                asmLines.append("jmp _exp_top_" + str(numExpJmps) + "\n")
                asmLines.append("_exp_out_" + str(numExpJmps) + ":\n")
                answerInrax = True
                numExpJmps += 1
                # skip the next token
                i += 2
            elif(tokenList[i+1] in validVars):
                asmLines.append("xor rdi, rdi\n")
                asmLines.append("mov rax, 1\n")
                asmLines.append("_exp_top_" + str(numExpJmps) + ":\n")
                asmLines.append("cmp rdi, QWORD[" + varsAndVarAliases[tokenList[i+1]] + "]\n")
                asmLines.append("jz _exp_out_" + str(numExpJmps) +"\n")
                if(tempExpVar.isdigit()):
                    asmLines.append("imul rax, " + tempExpVar + "\n")
                else:
                    asmLines.append("imul rax, QWORD[" + tempExpVar + "]\n")
                asmLines.append("inc rdi\n")
                asmLines.append("jmp _exp_top_" + str(numExpJmps) + "\n")
                asmLines.append("_exp_out_" + str(numExpJmps) + ":\n")
                answerInrax = True
                numExpJmps += 1
                # skip the next token
                i += 2
            # elif(tokenList[i+1].startswith('-') or tokenList[i+1] == "("):
            #     continue
            else:
                print("Error: bad math syntax. token " + tokenList[i+1] + " does not make sense to follow " + tokenList[i])
                sys.exit()
        elif(tokenList[i].isdigit() or (tokenList[i].startswith("-") and tokenList[i] != "-")):
            # check for exponentiation, it's a weird one
            if(tokenList[i+1] == "^"):
                tempExpVar = tokenList[i]
                i += 1
                continue
            if(workingStr == ""):
                workingStr = "mov"
            # asmLines.append(workingStr + " rdi, " + tokens[i] + "\n")
            if(answerInrax == True):
                asmLines.append(workingStr + " rax, " + tokens[i] + "\n")
                # answerInrax = False
            elif(computeArray == True):
                asmLines.append(workingStr + " rsi, " + tokens[i] + "\n")
            else:
                asmLines.append(workingStr + " rdi, " + tokens[i] + "\n")
            workingStr = ""
            i += 1
        else:
            print("Error: " + tokenList[i] + " is an invalid token.")
            sys.exit()

# # postfix version
# def newrecursiveVariableAssn():

def arrayCreator(arrayName, tokenList, i):
    # print("arrayCreator called")
    # used for determining lower bound
    lowerBoundTbl = []
    kValTbl = []
    deltaTbl = []
    while(i < len(tokenList)):
        # print(tokenList[i])
        if(tokenList[i].isdigit):
            sizeDigit1 = tokenList[i]
            lowerBoundTbl.append(sizeDigit1)
            if(tokenList[i+1] == ".."):
                i += 1
                if(tokenList[i+1].isdigit):
                    i += 1
                    sizeDigit2 = tokenList[i]
                    kValTbl.append(int(sizeDigit2) - int(sizeDigit1) + 1)
                    if(tokenList[i+1] == ","):
                        i += 2
                        continue
                    elif(tokenList[i+1] == "]"):
                        i += 1
                        if(tokenList[i+1] == ";"):
                            # wrap up array stuff
                            arrSizeVal = 1
                            # print(kValTbl)
                            for kIndex in range(0, len(kValTbl)):
                                arrSizeVal = arrSizeVal * kValTbl[kIndex]
                            for kIndex in range(len(kValTbl), 1, -1):
                                # print("index " + str(kIndex))
                                numsForDelta = kIndex
                                tempDelta = 1
                                while(numsForDelta != 1):
                                    tempDelta = tempDelta * kValTbl[len(kValTbl) - numsForDelta + 1]
                                    numsForDelta -= 1
                                    # print("delta val: " + str(tempDelta))
                                deltaTbl.append(tempDelta)
                            deltaTbl.append(1)
                            relocationFactor = 0
                            # print("delta table " + str(len(deltaTbl)))
                            # compute the relocation factor
                            for relocationIndex in range(0, len(deltaTbl)):
                                # print(relocationIndex)
                                relocationFactor += int(lowerBoundTbl[relocationIndex]) * deltaTbl[relocationIndex]
                                # print("relocation factor")
                                # print(relocationFactor)
                            # print info about the array
                            # print("array " + arrayName)
                            # print("k table:")
                            # print(kValTbl)
                            # print("size of array: " + str(arrSizeVal))
                            # print("delta table:")
                            # print(deltaTbl)
                            # print("lower bound: " + str(relocationFactor))
                            # store the array
                            arrayNames.append(arrayName)
                            arraySizes.append(arrSizeVal)
                            deltaValArrays.append(deltaTbl)
                            relocationFactors.append(relocationFactor)
                            i += 2
                            return i
                        else:
                            print("Error: missing semicolon after array " + arrayName.replace('ar', '',1))
                            sys.exit()

def arrayIndexFinder(arrayName, tokenList, i):
    # print(tokenList[i])
    # find the index of the array in our symtable
    arrayLocation = 0
    # print(arrayName)
    for j in range(0, len(arrayNames)):
        if(arrayName == arrayNames[j]):
            # print(arrayNames[j] + " at index " + str(j))
            arrayLocation = j
            break
    currentDelta = 0
    # we need to write the asm
    indexValues = []
    # clear out edi
    asmLines.append("xor rdi, rdi\n")
    while(i < len(tokenList)):
        if(tokenList[i].isdigit):
            # print("delta array")
            # print(deltaValArrays[arrayLocation])
            # print("current delta index: " + str(currentDelta))
            asmLines.append("mov rsi, " + str(deltaValArrays[arrayLocation][currentDelta]) + "\n")
            currentDelta += 1
            asmLines.append("imul rsi, " + tokenList[i] + "\n")
            asmLines.append("add rdi, rsi \n")
            if(tokenList[i+1] == ","):
                i += 2
                continue
            elif(tokenList[i+1] == "]"):
                asmLines.append("sub rdi, " + str(relocationFactors[arrayLocation]) + "\n")
                asmLines.append("imul rdi, 8\n")
                asmLines.append("add rdi, " + arrayName + "\n")

                i += 1
                # now we are assigning something
                if(tokenList[i+1] == "="):
                    # call recursiveVariableAssn, then put the answer in the array location
                    i += 2
                    i = recursiveVariableAssn(tokenList, i, True)
                    # needs to move the answer into the variable
                    asmLines.append("mov QWORD[rdi], rsi\n")
                    return i
                # if a semicolon, we are using the array in a write statement
                if(tokenList[i+1] == ";"):
                    asmLines.append("mov rdx, rdi\n")
                    i += 2
                    return i

# now we need to check out the tokens and make sure they're all valid
i = 0
# print(i)
while(i < len(tokens) ):
    # print(tokens[i])
    # is some sorta valid keyword
    if(tokens[i] in keywords or tokens[i] in stopsymbols):
        if(tokens[i] == "program" and i == 0):
            if(validVarName(tokens[i+1])):
                i += 1
                newVarName = tokens[i]
                # validVars.append(newVarName)
                progName = newVarName
                if(tokens[i+1] == ";"):
                    i += 1
                    if(tokens[i+1] == "begin"):
                        # print("program start successful")
                        i += 2
                        continue
                    else:
                        print("Error: program is missing begin statement")
                        sys.exit()
                else:
                    print("Error: missing semicolon after program name declaration")
                    sys.exit()
            else:
                print("Error: " + tokens[i+1] + " is not a valid name for a program")
                sys.exit()
        elif(tokens[i] == "num"):
             if(validVarName(tokens[i+1])):
                 # print(tokens[i+1] + " is a valid var name")
                 i += 1
                 newVarName = "n" + str(len(validVars)) + tokens[i]
                 # check if already declared
                 if(tokens[i] in validVars):
                     print("Variable name error: variable " + tokens[i] + " already declared")
                     sys.exit()
                 # print(newVarName)
                 validVars.append(tokens[i])
                 varsAndVarAliases[tokens[i]] = newVarName
                 # if we reach a semicolon, we've found uninitialized data
                 if(tokens[i+1] == ";"):
                     # print("creating new uninitialized var: " + newVarName)
                     i += 2
                     initializedVars.append(newVarName)
                     initializedVarVals.append("null")
                 elif(tokens[i+1] == "="):
                     i += 1
                     # print("assigning new value")
                     if(validVarName(tokens[i+1]) or tokens[i+1].isdigit() or (tokenList[i+1].startswith("-") and tokenList[i+1] != "-")):
                         i += 1
                         initializedVars.append(newVarName)
                         initializedVarVals.append("null")
                         # now we need some sort of recursive function
                         i = recursiveVariableAssn(tokens, i, False)
                         if(answerInrax == True):
                             asmLines.append("mov QWORD[" + newVarName + "], rax\n")
                             answerInrax = False
                         else:
                             asmLines.append("mov QWORD[" + newVarName + "], rdi\n")
                     else:
                         print("Error: math syntax error. bad assignment for variable " + tokens[i-1])
                         sys.exit()
                     # print(asmLines)
                 else:
                     print("Error: invalid num declaration for variable name " + tokens[i])
                     sys.exit()
             else:
                 print("Error: invalid variable name for variable: " + tokens[i+1])
                 sys.exit()
        elif(tokens[i] == "write"):
            # print("now writing line")
            # i += 1
            # write a string
            if(tokens[i+1].startswith('"') and tokens[i+1].endswith('"')):
                i += 1
                if(tokens[i+1] == ";"):
                    # create entry in data
                    storedStrings.append(tokens[i])
                    i += 2
                    asmLines.append("push rbp\n")
                    asmLines.append("mov rdi, s" + str(len(storedStrings)-1) + "\n")
                    asmLines.append("call printf\n")
                    asmLines.append("pop rbp\n")
            # write a variable
            elif(tokens[i+1] in validVars):
                i += 1
                # we are printing an array index
                if(("ar" + tokens[i]) in arrayNames):
                    arrayNameToPass = "ar" + tokens[i]
                    if(tokens[i+1] == "["):
                        i += 1
                        if(tokens[i+1].isdigit):
                            i += 1
                            # this finds the index and will add the code to write the string
                            i = arrayIndexFinder(arrayNameToPass,tokens, i)
                            # now just write the asm to write the value,
                            asmLines.append("push rbp\n")
                            asmLines.append("mov rdi, numberPrinter\n")
                            asmLines.append("mov rsi, QWORD[rdx]\n")
                            asmLines.append("call printf\n")
                            asmLines.append("pop rbp\n")
                # here we are just printing an array
                elif(tokens[i+1] == ";"):
                    asmLines.append("push rbp\n")
                    asmLines.append("mov rdi, numberPrinter\n")
                    asmLines.append("mov rsi,[" + varsAndVarAliases[tokens[i]] + "]\n")
                    asmLines.append("call printf\n")
                    asmLines.append("pop rbp\n")
                    i += 2
                # pass
            # write a digit
            elif(tokens[i+1].isdigit()):
                i += 1
                if(tokens[i+1] == ";"):
                    asmLines.append("push rbp\n")
                    asmLines.append("mov rdi, numberPrinter\n")
                    asmLines.append("mov rsi," + tokens[i] + "\n")
                    asmLines.append("call printf\n")
                    asmLines.append("pop rbp\n")
                    i += 2
            else:
                print("Error: variable " + tokens[i+1] + " is an improper variable, digit, or string to write")
                sys.exit()
        # now it's an array, apparently can't hold var names
        elif(tokens[i] == "array"):
            # next token must be a valid variable
            if(validVarName(tokens[i+1])):
                i += 1
                validVars.append(tokens[i])
                # create names
                newArrayName = "ar" + tokens[i]
                varsAndVarAliases[tokens[i]] = newArrayName
                numArraysCreated += 1
                # next token must be a [
                if(tokens[i+1] == "["):
                    i += 2
                    i = arrayCreator(newArrayName, tokens, i)
                    # moves on past the semicolon if executed successfully

        # end of file!
        elif(tokens[i] == "end."):
            break
        else:
            print("Error: token " + tokens[i] + " is not in correct context")
            print("Something in the following stream does not make sense: " + tokens[i-1] + " " + tokens[i] + " " + tokens[i+1])
            sys.exit()
    # we are assigning a variable
    elif(tokens[i] in validVars):
        # print("assigning value to variable " + tokens[i])
        tmpVarString = tokens[i]
        if(tokens[i+1] == "="):
            i += 2
            i = recursiveVariableAssn(tokens, i, False)
            if(answerInrax == True):
                asmLines.append("mov QWORD[" + varsAndVarAliases[tmpVarString] + "], rax\n")
                answerInrax = False
            else:
                asmLines.append("mov QWORD[" + varsAndVarAliases[tmpVarString] + "], rdi\n")
        # we may be assigning an array index
        elif(tokens[i+1] == "["):
            # print("found an array variable")
            # check to make sure there is an array with this name
            checkArrayName = "ar" + tokens[i]
            i += 1
            # print(checkArrayName)
            if(checkArrayName in arrayNames):
                # print("valid name of array")
                if(tokens[i+1].isdigit):
                    i += 1
                    i = arrayIndexFinder(checkArrayName, tokens, i)


    else:
        print("Error: " + tokens[i] + " is not a keyword or variable")
        sys.exit()

# print(validVars)

# print("Parsing completed successfully; no errors found")

# Now we should be done parsing, we need to write the asm now

# Part 3: Writing to files

# open the asm file
asmNameStr = progName + ".asm"
asmFile = open(asmNameStr, 'w')

# every file needs these
asmFile.write("GLOBAL main\n")
asmFile.write("extern printf\n")
asmFile.write("extern scanf\n")
asmFile.write("extern exit\n")
asmFile.write("\n")

# initializedVars
asmFile.write("\nsection .data\n")
for i in range(0, len(initializedVars)):
    # adds vars with initial values
    if(initializedVarVals[i] != "null"):
        asmFile.write(initializedVars[i] + " dq " + initializedVarVals[i] + "\n")
# add strings
for i in range(0, len(storedStrings)):
    asmFile.write("s" + str(i) + " db " + storedStrings[i] + ",0x0d,0x0a,0\n")

# add number printer
asmFile.write('numberPrinter: db' + ' "%ld" ' + ', 10, 0\n')

# uninitializedVars
asmFile.write("\nsection .bss\n")
for i in range(0, len(initializedVars)):
    if(initializedVarVals[i] == "null"):
        asmFile.write(initializedVars[i] + " resq 1;\n")
for i in range(0, len(arrayNames)):
    asmFile.write(arrayNames[i] + " resb " + str(arraySizes[i] * 8) + "\n")

# actual codestuffs
asmFile.write("\nsection .code\n")
asmFile.write("\tmain:\n")
for i in range(0, len(asmLines)):
    asmFile.write(asmLines[i] + "\n")

asmFile.write("\n; exit\n")
asmFile.write("mov	rax, 0\n")
asmFile.write("call 	exit;\n")

# print("writing to file completed successfully; program successfully compiled")
print(asmNameStr)
# print(deltaValArrays)
